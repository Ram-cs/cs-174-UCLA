Ram Yadav  				Homework-2UDI:- 6048415563.60:A.	Which registers hold program values x, n, result, and mask?  for x %rdi  for n %esi , and then later moved to %ecx  for result %raxB.	What are the initial values of result and mask? result = 0, mask = 1C.	What is the test condition for mask?  mask != 0D.	How does mask get updated? mask <<  n E.	How does result get updated? result |= (mask & x)F.	Fill in all the missing parts of the C code.⎝		long loop(long x, int n) ------------ write the code x in %rdi, n in %esi: -------------	%rdi = x,  %esi = nloop:2 movl %esi, %ecx------------ %ecx = n3 movl $1, %edx ----------- %edx = 14 movl $0, %eax --------- %eax (result) = 05 jmp .L2 ----- jump to test case6 .L3: 7 movq %rdi, %r8 ---------- move x to %r88 andq %rdx, %r8 ---------- mask & x9 orq %r8, %rax ------------ (1& x) | %rax (result)10 salq %cl, %rdx ---------- shift left 1 by n 1 << n11 .L2: --------------- test case12 testq %rdx, %rdx ------------- %rdx:%rdx13 jne .L3 ---------------- %rdx != %rdx (1 ! = 0) then, move to L3 (body part of program)14 rep; ret ------ return the result (%rax)long loop(long x, long n){ long result = _0_______________;long mask;for (mask =__1__________; mask != 0_______; mask = mask << n_____) {result |= _(mask &x)__________; } return result;}3.63:long switch_prob(long x, long n)x in %rdi , n in %rsi1 0000000000400590 <switch_prob>:2 400590: 48 83 ee 3c                       sub          $0x3c, %rsi -n - $0x3c  3 400594: 48 83 fe 05                       cmp          $0x5, %rsi n cmp $0x54 400598: 77 29                             ja 4005c3       <switch_prob+Ox33>5 40059a: ff 24 f5 f8 06 40 00              jmpq               '*Ox4006f8(,%rsi,8)6 4005a1: 48 8d 04 fd 00 00 00              lea                Ox0(,%rdi,8),%rax 7 4005a8: 008 4005a9: c3                                retq		return address9 4005aa: 48 89 f 8                         mov           %rdi,%rax  -- result = x10 4005ad: 48 cl f8 03                       sar                $0x3,%rax  result >> $0x311 4005b1: c3                                    retq        ------ return address12 4005b2: 48 89 f8                           mov            %rdi,%rax - result = x13 4005b5: 48 cl eO 04                      shl               $0x4,%rax  result << $0x414 4005b9: 48 29 f 8                          sub              %rdi,%rax  result - x15 4005bc: 48 89 c7                           mov          %rax,%rdi  rdi = result16 4005bf: 48 Of af ff                       imul           %rdi,%rdi  rdi * rdi17 4005c3: 48 8d 47 4b                     lea            Ox4b(%rdi),%rax '   give the address of the result18 4005c7: c3                                 retq          return 