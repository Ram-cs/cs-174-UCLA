Ram Yadav
UID: 604841556

1.
0x0000000000547920 <arith_driver+336>:	48 8d 04 ad 02 00 00 00	lea    0x2(,%rbp,4),%rax    rax=0xa
This instruction causes the problem causing incorrect result. I noticed that when rbp= 0xb38e48c71bd31c6f, 
it causes overflow.

2.
I analyze the data.c, noticed that most-negative-fixnum is defined on line 
   DEFVAR_LISP ("most-negative-fixnum", Vmost_negative_fixnum, doc: /* The smallest value that is representable in a Lisp integer. */);

   This references the varaible MOST_NEGATIVE_FIXNUM, which is located on line 831 in the lisp.h:

   #define MOST_NEGATIVE_FIXNUM (-1 - MOST_POSITIVE_FIXNUM)

Since the MOST_POSITIVE_FIXNUM is 2305843009213693951, I do the 2's complement in binary, but in this case I negate it 
and substract by 1 which is -2305843009213693952. 
That is why emacs -Q -batch -eval '(print most-negative-fixnum)' outputs -2305843009213693952

3. The shell command emacs -Q -batch -eval '(print (* most-positive-fixnum most-positive-fixnum most-positive-fixnum most-positive-fixnum))' outputs only 1 because in data.c, the function will mask the result with an INTMASK if a multiplication overflows. accum = ab & INTMASK;

Within 'lisp.h', I notice that INTMASK is (EMACS_INT_MAX >> (INTTYPEBITS - 1)), which is 0x3fffffffffffffff. 
The multiplication between the 2 most positive fixnum overflows, the result of wrapv is 0xc000000000000001, and it with 0x3fffffffffffffff, gives us 0x1, in decimal 1. 

4. If it has -fwrapv, it will automatically allow for overflow to take place, so I would not check the overflow.It will not output runtime or compiler error. Along, it will not give the result correctly as it will wrap the result when overflow occur. 

5.
I did this part by typing the command on the shell
gdb ~eggert/bin64/bin/emacs-25.2

then
r -Q -batch -eval '(print (format-time-string "%Y-%m-%d %H:%M:%S %Z" nil (concat (make-string 1000 ?X) "0")))'

GDB output:
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
[New Thread 0x7fffe3174700 (LWP 23510)]

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff173949b in __strcpy_sse2_unaligned () from /lib64/libc.so.6

Since, GDB stopped at this function, i guessed something is wrong with it, so
i disassemble the function using the command “disas”

(gdb) disas 0x00007ffff173949b
Dump of assembler code for function __strcpy_sse2_unaligned:
   0x00007ffff1739300 <+0>:	mov    %rsi,%rcx
   0x00007ffff1739303 <+3>:	mov    %rdi,%rax
   0x00007ffff1739306 <+6>:	and    $0x3f,%rcx
   0x00007ffff173930a <+10>:	cmp    $0x20,%rcx
   0x00007ffff173930e <+14>:	jbe    0x7ffff1739523 <__strcpy_sse2_unaligned+5

then print the value of the register
rax            0x14836b3	21509811
rbx            0x3d5	981
rcx            0x70	112
rdx            0x0	0
rsi            0x149af80	21606272
rdi            0x149b00a	21606410
rbp            0x14836b0	0x14836b0
rsp            0x7fffffffc638	0x7fffffffc638
r8             0x14839ec	21510636


then,tried to print the value of register $rdi
(gdb) i r rdi
rdi            0x149b00a	21606410

and then tried to access the memory address 
(gdb) x/x 0x149b00a

I got this output
0x149b00a:Cannot access memory at address 0x149b00a

Since, it can not access the memory address, it is possible that it pointed to the null, or something is wrong with the 
memory allocation. 


