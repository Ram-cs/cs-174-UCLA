Ram Yadav
Prof: Paul Eggert

- I downloaded the zip of OpemMp Lab
- I unzipped it using command 
tar -xvf openmplab.tar

- ran the command
make seq command to create the executable called seq
./seq
FUNC TIME : 0.474211
TOTAL TIME : 2.617464

- I know that OpenMp Lab uses thread parallelism to speed up the code, so
I wanted to know the time functions takes to execute, thus run the following
command
$ make seq GPROF=1

- I got the execute the executable (this produces gmon.out)

- I execute the file using command, to get the function’s time and
total time
./seq
got output,
FUNC TIME : 0.542429
TOTAL TIME : 2.429810


- I ran the following command to see time takes each functions to run
$ gprof seq | less

got this output,
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 61.49      0.35     0.35       15    23.36    25.14  func1
 24.59      0.49     0.14  5177344     0.00     0.00  rand2
  3.51      0.51     0.02   491520     0.00     0.00  findIndexBin
  3.51      0.53     0.02        1    20.03   133.60  addSeed
  3.51      0.55     0.02                             sequence
  1.76      0.56     0.01        1    10.01    10.01  imdilateDisk
  1.76      0.57     0.01                             filter
  0.00      0.57     0.00   983042     0.00     0.00  round
  0.00      0.57     0.00       16     0.00     0.00  dilateMatrix
  0.00      0.57     0.00       15     0.00     0.00  func2
  0.00      0.57     0.00       15     0.00     0.00  func3
  0.00      0.57     0.00       15     0.00     0.00  func4
  0.00      0.57     0.00       15     0.00     1.34  func5
  0.00      0.57     0.00       15     0.00     0.00  rand1
  0.00      0.57     0.00        2     0.00     0.00  get_time
  0.00      0.57     0.00        1     0.00     0.00  elapsed_time
  0.00      0.57     0.00        1     0.00     0.00  fillMatrix
  0.00      0.57     0.00        1     0.00     0.00  func0
  0.00      0.57     0.00        1     0.00     0.00  getNeighbors
:
q
From the above output it can be seen that func1 is taking more
time to run

I used “q” to quit the output

So, I opened up the file called func.c. I found that there was all the functions 
(frunc0-func5). Then i started thinking how to use the 32 processors of linux 
server to boost my function performance. I came to the conclusion that if i 
want to fully utilize the hardware, i should chose my thread close to 32 
processor. After tried many thread, i Picked 29 thread counts because it 
works best among all.

I used the omp_set_num_threads(29) at the beginning of each function
Then i have used #pragma omp parallel for, #pragma omp parallel private(), 
#pragma omp parallel reduction(+:_____) as i needed for the functions 
from 0-5. 
-ran command
$ make omp MTRACE=1
./omp

got output
FUNC TIME : 0.037901
TOTAL TIME : 2.017097 

From the above output, it is found that, after adding parallel thread, program output 
is around 0.542429/0.037901 = (~14.31x) faster.

-ran command
$ make omp GPROF=1
./omp
got 5 ouput
[yadav@lnxsrv07 ~/33/lab4]$ ./omp
FUNC TIME : 0.129384
TOTAL TIME : 2.095453
[yadav@lnxsrv07 ~/33/lab4]$ ./omp
FUNC TIME : 0.134954
TOTAL TIME : 2.028770
[yadav@lnxsrv07 ~/33/lab4]$ ./omp
FUNC TIME : 0.132749
TOTAL TIME : 2.044375
[yadav@lnxsrv07 ~/33/lab4]$ ./omp
FUNC TIME : 0.133492
TOTAL TIME : 2.049878
[yadav@lnxsrv07 ~/33/lab4]$ ./omp
FUNC TIME : 0.131624
TOTAL TIME : 2.008362

The ave. function time I got is: 0.1324406

from the above output, using (make omp GPROF=1) it is concluded that, using thread, program is around 0.542429/0.1324406 = ~4.1x faster.

$ gprof omp | less

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 57.95      0.33     0.33                             filter
 25.47      0.48     0.15  4220954     0.00     0.00  rand2
 12.29      0.55     0.07    11190     0.01     0.01  findIndexBin
  1.76      0.56     0.01        1    10.01    10.01  imdilateDisk
  1.76      0.57     0.01                             sequence
  0.88      0.57     0.01       15     0.33     0.33  rand1
  0.00      0.57     0.00    46924     0.00     0.00  round
  0.00      0.57     0.00       16     0.00     0.00  dilateMatrix
  0.00      0.57     0.00       15     0.00     0.00  func1
  0.00      0.57     0.00       15     0.00     0.00  func2
  0.00      0.57     0.00       15     0.00     0.00  func3
  0.00      0.57     0.00       15     0.00     0.00  func4
  0.00      0.57     0.00       15     0.00     0.00  func5
  0.00      0.57     0.00        2     0.00     0.00  get_time
  0.00      0.57     0.00        1     0.00   144.23  addSeed
  0.00      0.57     0.00        1     0.00     0.00  elapsed_time
  0.00      0.57     0.00        1     0.00     0.00  fillMatrix
  0.00      0.57     0.00        1     0.00     0.00  func0
  0.00      0.57     0.00        1     0.00     0.00  getNeighbors

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
:

$ make check
gcc -o omp  -O3 -fopenmp filter.c main.c func.c util.c -lm
cp omp filter
./filter
FUNC TIME : 0.036785
TOTAL TIME : 1.926286
diff --brief correct.txt output.txt

checked the memory leak, ran the following command
$ make checkmem
After i did command, i got output saying memory is not free. But since i haven’t allocated any 
memory for any functions, i ignored the output. 